import {Injector} from './Injector';
import { Constructor } from './types';

export type Requirement = string | {
    name: string;
    data: any
};

const dependencies_ = Symbol('dependencies');
const requirements_ = Symbol('requirements');

export function DependenciesMixin<T extends any>(BaseClass: Constructor<T>) {
    // @ts-ignore
    return class DependenciesMixinClass extends BaseClass {
        static get [requirements_] (): Requirement[] { return [] };
        public [dependencies_]:Record<string|symbol|number, any> = {};
        constructor() {
            super();
            (this.constructor as any)[requirements_].forEach((entry: Requirement) => {
                if (typeof entry === 'string') {
                    this[dependencies_][entry] = Injector.resolve(entry);
                } else {
                    this[dependencies_][entry.name] = Injector.resolve(entry.name, entry.data)
                }
            });
        }
    };
}

export const dependencies = dependencies_;
export const requirements = requirements_;