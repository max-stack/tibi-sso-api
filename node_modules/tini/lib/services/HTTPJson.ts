import { Injector } from "../Injector";

const defaultFetchOptions = (defaults = {}, options = {}): Partial<RequestInit> => {
    return {
        ...defaults,
        ...options
    };
}

type HttpInterceptor = (data: any) => Promise<any>;

type HTTPJsonInit = Partial<{
    baseUrl: string;
    defaults: Partial<RequestInit>;
}>;

export interface IHTTPJson {
    readonly baseUrl: string;
    readonly defaults: Partial<RequestInit>
    intercept: (interceptor: HttpInterceptor) => void;
    get: (path: string, options?: Partial<RequestInit>) => Promise<any>;
    post: (path: string, body?: any, options?: Partial<RequestInit>) => Promise<any>;
    put: (path: string, body?: any, options?: Partial<RequestInit>) => Promise<any>;
    delete: (path: string, body: any, options?: Partial<RequestInit>) => Promise<any>;
}

class HTTPJson implements IHTTPJson {
    public baseUrl: string;
    public defaults: Partial<RequestInit>;

    private interceptors: HttpInterceptor[] = [];

    constructor(init: HTTPJsonInit = {}) {
        this.baseUrl = init.baseUrl || '/';
        this.defaults = init.defaults || {};
        this.interceptors.push((anyResponse: any) => Promise.resolve(anyResponse));
    }

    private async processResponse(data: any): Promise<any> {
        let result = data;
        for (const interceptor of this.interceptors) {
            result = await interceptor(result);
        }
        return result;
    }

    public intercept(interceptor: HttpInterceptor) {
        this.interceptors.push(interceptor);
    }

    async post(path: string, body: any = undefined, options?: Partial<RequestInit>): Promise<any> {
        const response = await fetch(path, {
            method: 'POST',
            ...defaultFetchOptions(this.defaults, options),
            body
        });
        let result = response.json();
        return await this.processResponse(result);
    }

    async get(path: string, options: Partial<RequestInit> = {}): Promise<any> {
        const response = await fetch(this.baseUrl + path, defaultFetchOptions(this.defaults, options));
        let result = await response.json();
        return await this.processResponse(result);
    }

    async put(path: string, body: any, options: Partial<RequestInit> = {}): Promise<any> {
        return this.post(path, body, {
            method: 'PUT',
            ...options
        });
    }

    async delete(path: string, body: any, options: Partial<RequestInit> = {}): Promise<any> {
        return this.post(path, body, {
            method: 'DELETE',
            ...options
        });
    }
}

export const HttpJson = Symbol('HttpJson');
Injector.define(HttpJson, (data: HTTPJsonInit) => new HTTPJson(data));
