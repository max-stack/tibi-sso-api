import { Constructor } from './types';
import { scanDOMTree } from './component/nodes';

export const ComponentMixinInternals = Symbol('ComponentMixinInternal');
export function ComponentMixin<T extends any>(BaseClass: Constructor<T>) {
    // @ts-ignore
    return class ComponentMixinClass extends BaseClass {
        constructor() {
            super();
            // @ts-ignore
            this[ComponentMixinInternals] = {};
            const fragment = document.createElement('template') as HTMLTemplateElement;
            fragment.innerHTML = (<any>this.constructor).template;
            const content = fragment.content.cloneNode(true);
            const shadow: ShadowRoot = (<any>this).attachShadow({mode: 'open'});
            const {paths, update} = scanDOMTree(content as Element, <any>this, []);
            // @ts-ignore
            this[ComponentMixinInternals].update = update;
            shadow.appendChild(content);
            requestAnimationFrame(() => {
                paths.forEach(path => {
                    const key = path.slice(5);
                    let calculated: any = (<any>this)[key];
                    Object.defineProperty(this, key, {
                        set: (value) => {
                            calculated = value
                            update(key);
                        },
                        get: () => calculated
                    });
                    update(key);
                });
            })
        }
    }
}