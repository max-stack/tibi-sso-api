class InjectorClass {
    private injectors: Map<NonNullable<any>, Function> = new Map();

    public define(name: NonNullable<any>, factory: Function): InjectorClass {
        if (this.injectors.has(name)) {
            throw new Error('Cannot redefine existing injector ' + name);
        }
        this.injectors.set(name, factory);
        return this;
    }

    public resolve<T = any>(name: string, data: any = undefined):T {
        const resolution = this.injectors.get(name);
        if (resolution) {
            return resolution(data) as T;
        }
        throw new Error('Cannot inject nonexisting dependency ' + name);
    }
}

export const Injector = new InjectorClass();